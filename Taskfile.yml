version: "3"

env:
  GOPATH:
    sh: echo $GOPATH
  TEST_TIMEOUT:
    sh: echo ${TEST_TIMEOUT:-"5m"}

tasks:
  build:
    desc: Build the project
    cmds:
      - go build -v ./...

  list-packages:
    desc: List Go packages
    cmds:
      - go list ./{{.PKG}}/...
    vars:
      PKG:
        sh: echo $PKG

  set-db-env:
    desc: Set database specific environment variables
    cmds:
      - |
        case "{{.DB}}" in
          mongo)
            export TEST_STORAGE_CONNECTION_STRING="mongodb://localhost:27017/test"
            ;;
          redis)
            export REDIS_CONNECTION_STRING="localhost:6379"
            ;;
          *)
            echo "unsupported database: {{.DB}}" >&2
            exit 1
            ;;
        esac

  run-tests:
    desc: Run Go tests for specified storage and database
    cmds:
      - |
        for pkg in $(go list ./{{.STORAGE_TYPE}}/...);
        do
          tags=$([[ ${pkg} == *"driver"* ]] && echo "-tags {{.DB}}" || echo "")
          go test -failfast -timeout $TEST_TIMEOUT -race -cover $tags -v ${pkg}
        done

  test-persistent:
    desc: Run tests for persistent storage with specified database
    cmds:
      - task: set-db-env DB={{.DB}}
      - task: run-tests STORAGE_TYPE=persistent DB={{.DB}}
    vars:
      DB:
        sh: echo $DB

  test-temporal:
    desc: Run tests for temporal storage with specified database
    cmds:
      - task: set-db-env DB={{.DB}}
      - task: run-tests STORAGE_TYPE=temporal DB={{.DB}}
    vars:
      DB:
        sh: echo $DB

  merge-cov:
    desc: Merge coverage files for both persistent and temporal storages
    cmds:
      - |
        # Persistent storage
        for pkg in $(go list ./persistent/...);
        do
          coveragefile=`echo "$pkg.cov" | awk -F/ '{print $NF}'`
          mongo_cov=`echo "$pkg-mongo.cov" | awk -F/ '{print $NF}'`
          gocovmerge $mongo_cov  > $coveragefile
          rm $mongo_cov
        done

        # Temporal storage
        for pkg in $(go list ./temporal/...);
        do
          coveragefile=`echo "$pkg.cov" | awk -F/ '{print $NF}'`
          redis_cov=`echo "$pkg-redis.cov" | awk -F/ '{print $NF}'`
          gocovmerge $redis_cov  > $coveragefile
          rm $redis_cov
        done
