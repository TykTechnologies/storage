version: "3"

env:
  GOPATH:
    sh: echo $GOPATH
  TEST_TIMEOUT:
    sh: echo ${TEST_TIMEOUT:-"5m"}

tasks:
  build:
    desc: "Build the project"
    cmds:
      - go build -v ./...

  list-packages:
    desc: "List Go packages for a given PKG"
    cmds:
      - go list ./{{.PKG}}/...
    vars:
      PKG:
        sh: echo $PKG

  set-db-env:
    desc: "Set database-specific environment variables based on DB type"
    cmds:
      - |
        case "{{.DB}}" in
          mongo)
            echo 'export TEST_STORAGE_CONNECTION_STRING="mongodb://localhost:27017/test"' > .env
            ;;
          redis)
            echo 'export REDIS_CONNECTION_STRING="localhost:6379"' > .env
            ;;
          *)
            echo "unsupported database: {{.DB}}" >&2
            exit 1
            ;;
        esac
      - source .env

  run-tests:
    desc: "Run Go tests for specified storage and database"
    cmds:
      - source .env
      - |
        for pkg in $(go list ./{{.STORAGE_TYPE}}/...);
        do
          coveragefile=$(basename "$pkg").cov
          tags=$([[ ${pkg} == *"driver"* ]] && echo "-tags {{.DB}}" || echo "")
          go test -failfast -timeout $TEST_TIMEOUT -race -cover $tags -coverprofile=${coveragefile} -v ${pkg}
          if [ -f "${coveragefile}" ]; then
            mv ${coveragefile} "coverage-${pkg}.out"
          fi
        done

  test-storage:
    desc: "Run tests for a specified storage type with specified database"
    cmds:
      - task: set-db-env
        vars:
          DB: "{{.DB}}"
      - task: run-tests
        vars:
          STORAGE_TYPE: "{{.STORAGE_TYPE}}"
          DB: "{{.DB}}"

  merge-coverage:
    desc: "Merge coverage files for a given storage type"
    cmds:
      - |
        for pkg in $(go list ./{{.STORAGE_TYPE}}/...);
        do
          coveragefile=$(basename "$pkg").cov
          specific_cov=$(basename "$pkg")-{{.DB}}.cov
          gocovmerge $specific_cov > $coveragefile
          rm $specific_cov
        done

  test-persistent:
    desc: "Run tests for persistent storage with specified database"
    cmds:
      - task: test-storage
        vars:
          STORAGE_TYPE: persistent
          DB: "{{.DB}}"

  test-temporal:
    desc: "Run tests for temporal storage with specified database"
    cmds:
      - task: test-storage
        vars:
          STORAGE_TYPE: temporal
          DB: "{{.DB}}"
